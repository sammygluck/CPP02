#include "../incl/RobotomyRequestForm.hpp"

RobotomyRequestForm::RobotomyRequestForm(): AForm("RobotomyDefault", 72, 45)
{
    this->setTarget("default");
}

RobotomyRequestForm::RobotomyRequestForm(std::string target): AForm("RobotomyRequestForm", 72, 45)
{
    this->setTarget(target);
}

RobotomyRequestForm::RobotomyRequestForm(const RobotomyRequestForm &other): AForm(other) // copy constructor
{
    this->setTarget(other.getTarget());
}

RobotomyRequestForm &RobotomyRequestForm::operator=(const RobotomyRequestForm &other)
{
    this->setTarget(other.getTarget());
    return *this;
}

RobotomyRequestForm::~RobotomyRequestForm()
{
    std::cout << "RobotomyRequestForm " << this->getName() << " is destroyed" << std::endl;
}

void RobotomyRequestForm::execute(Bureaucrat const &executor) const
{
    if (executor.getGrade() > this->getExecGrade())
        throw AForm::GradeTooLowException();
    if (!this->getSigned())
        throw AForm::NotSignedException();

    std::cout << "DRRRRIIIIIILLLLLL" << std::endl;

    // Initialize random seed
    srand(time(NULL));

    // Generate random number (0 or 1)
    int random_number = rand() % 2;

    if (random_number == 1)
        std::cout << "Robotomizing " << this->getTarget() << "..." << std::endl;
    else
        throw RobotomizeException();
}

// void RobotomyRequestForm::execute(Bureaucrat const & executor) const
// {
//     if (executor.getGrade() > this->getExecGrade())
//         throw AForm::GradeTooLowException();
//     if (!this->getSigned())
//         throw AForm::NotSignedException();

//     std::cout << "DRRRRIIIIIILLLLLL" << std::endl;

//     std::random_device rd; //Will be used to obtain a seed for the random number engine
//     std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
//     std::uniform_int_distribution<> dis(0, 1); // 0 or 1
//     int random_number = dis(gen); //Use dis to transform the random unsigned int generated by gen into an int in [0, 1]

//     if (random_number == 1)
//         std::cout << "Robotomizing " << this->getTarget() << "..." << std::endl;
//     else
//         throw RobotomizeException();
// }

const char* RobotomyRequestForm::RobotomizeException::what() const throw()
{
    return "Robotomize failed";
}

